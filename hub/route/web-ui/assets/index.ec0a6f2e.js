import{R as e,c as w,f as et,r as m,a as ve,E as Te,b as tt,d as J,e as we,u as fe,g as Ce,h as H,i as Be,j as be,k as X,l as Me,m as nt,n as Ee,o as st,p as Ne,q as ot,s as ne,t as at,v as lt,w as rt,x as ct,y as it,z as Le,A as ut,B as mt,C as dt,D as pt,F as ft,_ as me,I as Et,G as ht,H as yt,J as xt,N as gt,O as vt,K as wt,L as de,M as Ct,P as bt,Q as Nt}from"./vendor.c3e7c203.js";(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const a of document.querySelectorAll('link[rel="modulepreload"]'))o(a);new MutationObserver(a=>{for(const l of a)if(l.type==="childList")for(const r of l.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&o(r)}).observe(document,{childList:!0,subtree:!0});function s(a){const l={};return a.integrity&&(l.integrity=a.integrity),a.referrerpolicy&&(l.referrerPolicy=a.referrerpolicy),a.crossorigin==="use-credentials"?l.credentials="include":a.crossorigin==="anonymous"?l.credentials="omit":l.credentials="same-origin",l}function o(a){if(a.ep)return;a.ep=!0;const l=s(a);fetch(a.href,l)}})();function Y(){return navigator.userAgent==="ClashX Runtime"}let D=null;class Pt{constructor(t){this.instance=null,window.WebViewJavascriptBridge!=null&&(this.instance=window.WebViewJavascriptBridge),this.initBridge(s=>{this.instance=s,t()})}initBridge(t){if(!Y())return t==null?void 0:t(null);if(window.WebViewJavascriptBridge!=null)return t(window.WebViewJavascriptBridge);if(window.WVJBCallbacks!=null)return window.WVJBCallbacks.push(t);window.WVJBCallbacks=[t];const s=document.createElement("iframe");s.style.display="none",s.src="https://__bridge_loaded__",document.documentElement.appendChild(s),setTimeout(()=>document.documentElement.removeChild(s),0)}async callHandler(t,s){return await new Promise(o=>{var a;(a=this.instance)==null||a.callHandler(t,s,o)})}async ping(){return await this.callHandler("ping")}async readConfigString(){return await this.callHandler("readConfigString")}async getPasteboard(){return await this.callHandler("getPasteboard")}async getAPIInfo(){return await this.callHandler("apiInfo")}async setPasteboard(t){return await this.callHandler("setPasteboard",t)}async writeConfigWithString(t){return await this.callHandler("writeConfigWithString",t)}async setSystemProxy(t){return await this.callHandler("setSystemProxy",t)}async getStartAtLogin(){return await this.callHandler("getStartAtLogin")}async getProxyDelay(t){return await this.callHandler("speedTest",t)}async setStartAtLogin(t){return await this.callHandler("setStartAtLogin",t)}async isSystemProxySet(){return await this.callHandler("isSystemProxySet")}}function St(n){if(D!=null){n();return}D=new Pt(n)}function W(n){const{title:t,children:s,className:o,style:a}=n;return e.createElement("header",{className:w("header",o),style:a},e.createElement("h1",{className:"md:text-xl"},t),e.createElement("div",{className:"flex flex-auto items-center justify-end"},s))}function I(n){const{type:t,size:s=14,className:o,style:a}=n,l=w("clash-iconfont",`icon-${t}`,o),r={fontSize:s,...a},c={...n,className:l,style:r};return e.createElement("i",{...c})}function z(){}function kt(n,t){const s=[],o=[];for(const a of n)t(a)?s.push(a):o.push(a);return[s,o]}function M(n){var o;const t=["B","KiB","MiB","GiB","TiB"],s=Math.floor(Math.log(n||1)/Math.log(1024));return`${et(n/Math.pow(1024,s),2).toFixed(2)} ${(o=t==null?void 0:t[s])!=null?o:""}`}function ze(n){return n.replace(/.*[/\\]/,"")}function pe(n){const{className:t,checked:s=!1,disabled:o=!1,onChange:a=z}=n,l=w("switch",{checked:s,disabled:o},t);function r(){o||a(!s)}return e.createElement("div",{className:l,onClick:r},e.createElement(I,{className:"switch-icon font-bold",type:"check",size:20}))}const U=m.exports.forwardRef((n,t)=>{const{className:s,style:o,children:a}=n;return e.createElement("div",{className:w("card",s),style:o,ref:t},a)});function $e(n){const{options:t,value:s,onSelect:o}=n;return e.createElement("div",{className:"button-select"},t.map(a=>e.createElement("button",{value:a.value,key:a.value,className:w("button-select-options",{actived:s===a.value}),onClick:()=>o==null?void 0:o(a.value)},a.label)))}const Dt={SideBar:{Proxies:"Proxies",Overview:"Overview",Logs:"Logs",Rules:"Rules",Settings:"Setting",Connections:"Connections",Version:"Version"},Settings:{title:"Settings",labels:{startAtLogin:"Start at login",language:"language",setAsSystemProxy:"Set as system proxy",allowConnectFromLan:"Allow connect from Lan",proxyMode:"Mode",socks5ProxyPort:"Socks5 proxy port",httpProxyPort:"HTTP proxy port",mixedProxyPort:"Mixed proxy port",externalController:"External controller"},values:{cn:"\u4E2D\u6587",en:"English",global:"Global",rules:"Rules",direct:"Direct",script:"Script"},versionString:"Current ClashX is the latest version\uFF1A{{version}}",checkUpdate:"Check Update",externalControllerSetting:{title:"External Controller",note:"Please note that modifying this configuration will only configure Dashboard. Will not modify your Clash configuration file. Please make sure that the external controller address matches the address in the Clash configuration file, otherwise, Dashboard will not be able to connect to Clash.",host:"Host",port:"Port",secret:"Secret"}},Logs:{title:"Logs",levelLabel:"Log level"},Rules:{title:"Rules",providerTitle:"Providers",providerUpdateTime:"Last updated at",ruleCount:"Rule count"},Connections:{title:"Connections",keepClosed:"Keep closed connections",total:{text:"total",upload:"upload",download:"download"},closeAll:{title:"Warning",content:"This would close all connections"},filter:{all:"All"},columns:{host:"Host",network:"Network",type:"Type",chains:"Chains",process:"Process",rule:"Rule",time:"Time",speed:"Speed",upload:"Upload",download:"Download",sourceIP:"Source IP"},info:{title:"Connection",id:"ID",host:"Host",hostEmpty:"Empty",dstIP:"IP",dstIPEmpty:"Empty",srcIP:"Source",upload:"Up",download:"Down",network:"Network",process:"Process",processPath:"Path",inbound:"Inbound",rule:"Rule",chains:"Chains",status:"Status",opening:"Open",closed:"Closed",closeConnection:"Close"}},Proxies:{title:"Proxies",editDialog:{title:"Edit Proxy",color:"Color",name:"Name",type:"Type",server:"Server",port:"Port",password:"Password",cipher:"Cipher",obfs:"Obfs","obfs-host":"Obfs-host",uuid:"UUID",alterId:"AlterId",tls:"TLS"},groupTitle:"Policy Group",providerTitle:"Providers",providerUpdateTime:"Last updated at",expandText:"Expand",collapseText:"Collapse",speedTestText:"Speed Test",breakConnectionsText:"Close connections which include the group"},Modal:{ok:"Ok",cancel:"Cancel"}},Ft={SideBar:{Proxies:"\u4EE3\u7406",Overview:"\u603B\u89C8",Logs:"\u65E5\u5FD7",Rules:"\u89C4\u5219",Settings:"\u8BBE\u7F6E",Connections:"\u8FDE\u63A5",Version:"\u7248\u672C"},Settings:{title:"\u8BBE\u7F6E",labels:{startAtLogin:"\u5F00\u673A\u65F6\u542F\u52A8",language:"\u8BED\u8A00",setAsSystemProxy:"\u8BBE\u7F6E\u4E3A\u7CFB\u7EDF\u4EE3\u7406",allowConnectFromLan:"\u5141\u8BB8\u6765\u81EA\u5C40\u57DF\u7F51\u7684\u8FDE\u63A5",proxyMode:"\u4EE3\u7406\u6A21\u5F0F",socks5ProxyPort:"Socks5 \u4EE3\u7406\u7AEF\u53E3",httpProxyPort:"HTTP \u4EE3\u7406\u7AEF\u53E3",mixedProxyPort:"\u6DF7\u5408\u4EE3\u7406\u7AEF\u53E3",externalController:"\u5916\u90E8\u63A7\u5236\u8BBE\u7F6E"},values:{cn:"\u4E2D\u6587",en:"English",global:"\u5168\u5C40",rules:"\u89C4\u5219",direct:"\u76F4\u8FDE",script:"\u811A\u672C"},versionString:"\u5F53\u524D ClashX \u5DF2\u662F\u6700\u65B0\u7248\u672C\uFF1A{{version}}",checkUpdate:"\u68C0\u67E5\u66F4\u65B0",externalControllerSetting:{title:"\u7F16\u8F91\u5916\u90E8\u63A7\u5236\u8BBE\u7F6E",note:"\u8BF7\u6CE8\u610F\uFF0C\u4FEE\u6539\u8BE5\u914D\u7F6E\u9879\u5E76\u4E0D\u4F1A\u4FEE\u6539\u4F60\u7684 Clash \u914D\u7F6E\u6587\u4EF6\uFF0C\u8BF7\u786E\u8BA4\u4FEE\u6539\u540E\u7684\u5916\u90E8\u63A7\u5236\u5730\u5740\u548C Clash \u914D\u7F6E\u6587\u4EF6\u5185\u7684\u5730\u5740\u4E00\u81F4\uFF0C\u5426\u5219\u4F1A\u5BFC\u81F4 Dashboard \u65E0\u6CD5\u8FDE\u63A5\u3002",host:"Host",port:"\u7AEF\u53E3",secret:"\u5BC6\u94A5"}},Logs:{title:"\u65E5\u5FD7",levelLabel:"\u65E5\u5FD7\u7B49\u7EA7"},Rules:{title:"\u89C4\u5219",providerTitle:"\u89C4\u5219\u96C6",providerUpdateTime:"\u6700\u540E\u66F4\u65B0\u4E8E",ruleCount:"\u89C4\u5219\u6761\u6570"},Connections:{title:"\u8FDE\u63A5",keepClosed:"\u4FDD\u7559\u5173\u95ED\u8FDE\u63A5",total:{text:"\u603B\u91CF",upload:"\u4E0A\u4F20",download:"\u4E0B\u8F7D"},closeAll:{title:"\u8B66\u544A",content:"\u5C06\u4F1A\u5173\u95ED\u6240\u6709\u8FDE\u63A5"},filter:{all:"\u5168\u90E8"},columns:{host:"\u57DF\u540D",network:"\u7F51\u7EDC",process:"\u8FDB\u7A0B",type:"\u7C7B\u578B",chains:"\u8282\u70B9\u94FE",rule:"\u89C4\u5219",time:"\u8FDE\u63A5\u65F6\u95F4",speed:"\u901F\u7387",upload:"\u4E0A\u4F20",download:"\u4E0B\u8F7D",sourceIP:"\u6765\u6E90 IP"},info:{title:"\u8FDE\u63A5\u4FE1\u606F",id:"ID",host:"\u57DF\u540D",hostEmpty:"\u7A7A",dstIP:"IP",dstIPEmpty:"\u7A7A",srcIP:"\u6765\u6E90",upload:"\u4E0A\u4F20",download:"\u4E0B\u8F7D",network:"\u7F51\u7EDC",process:"\u8FDB\u7A0B",processPath:"\u8DEF\u5F84",inbound:"\u5165\u53E3",rule:"\u89C4\u5219",chains:"\u4EE3\u7406",status:"\u72B6\u6001",opening:"\u8FDE\u63A5\u4E2D",closed:"\u5DF2\u5173\u95ED",closeConnection:"\u5173\u95ED\u8FDE\u63A5"}},Proxies:{title:"\u4EE3\u7406",editDialog:{title:"\u7F16\u8F91\u4EE3\u7406",color:"\u989C\u8272",name:"\u540D\u5B57",type:"\u7C7B\u578B",server:"\u670D\u52A1\u5668",port:"\u7AEF\u53E3",password:"\u5BC6\u7801",cipher:"\u52A0\u5BC6\u65B9\u5F0F",obfs:"Obfs","obfs-host":"Obfs-host",uuid:"UUID",alterId:"AlterId",tls:"TLS"},groupTitle:"\u7B56\u7565\u7EC4",providerTitle:"\u4EE3\u7406\u96C6",providerUpdateTime:"\u6700\u540E\u66F4\u65B0\u4E8E",expandText:"\u5C55\u5F00",collapseText:"\u6536\u8D77",speedTestText:"\u6D4B\u901F",breakConnectionsText:"\u5207\u6362\u65F6\u6253\u65AD\u5305\u542B\u7B56\u7565\u7EC4\u7684\u8FDE\u63A5"},Modal:{ok:"\u786E \u5B9A",cancel:"\u53D6 \u6D88"}},He={en_US:Dt,zh_CN:Ft},At=Object.keys(He);function Lt(){for(const n of window.navigator.languages){if(n.includes("zh"))return"zh_CN";if(n.includes("us"))return"en_US"}return"en_US"}function Pe(n){return m.exports.useMemo(()=>{function s(o,a){if(typeof o=="string")n(l=>{const r=o,c=a;l[r]=c});else if(typeof o=="function"){const l=o;n(r=>l(r))}else typeof o=="object"&&n(l=>ve(l,r=>{const c=o;for(const u of Object.keys(c)){const p=u;r[p]=c[p]}}))}return s},[n])}class Ue{constructor(t){this.EE=new Te,this.innerBuffer=[],this.url="",this.connection=null,this.config=Object.assign({bufferLength:0,retryInterval:5e3},t)}connectWebsocket(){if(!this.url)return;const t=new URL(this.url);this.connection=new WebSocket(t.toString()),this.connection.addEventListener("message",s=>{const o=JSON.parse(s.data);this.EE.emit("data",[o]),this.config.bufferLength>0&&(this.innerBuffer.push(o),this.innerBuffer.length>this.config.bufferLength&&this.innerBuffer.splice(0,this.innerBuffer.length-this.config.bufferLength))}),this.connection.addEventListener("error",s=>{var o;this.EE.emit("error",s),(o=this.connection)==null||o.close(),setTimeout(this.connectWebsocket,this.config.retryInterval)})}connect(t){var s;this.url===t&&this.connection||(this.url=t,(s=this.connection)==null||s.close(),this.connectWebsocket())}subscribe(t,s){this.EE.addListener(t,s)}unsubscribe(t,s){this.EE.removeListener(t,s)}buffer(){return this.innerBuffer.slice()}destory(){var t;this.EE.removeAllListeners(),(t=this.connection)==null||t.close(),this.connection=null}}class $t{constructor(t,s){this.axiosClient=tt.create({baseURL:t,headers:s?{Authorization:`Bearer ${s}`}:{}})}async getConfig(){return await this.axiosClient.get("configs")}async updateConfig(t){return await this.axiosClient.patch("configs",t)}async getRules(){return await this.axiosClient.get("rules")}async getProxyProviders(){const t=await this.axiosClient.get("providers/proxies",{validateStatus(s){return s>=200&&s<300||s===404}});return t.status===404&&(t.data={providers:{}}),t}async getRuleProviders(){return await this.axiosClient.get("providers/rules")}async updateProvider(t){return await this.axiosClient.put(`providers/proxies/${encodeURIComponent(t)}`)}async updateRuleProvider(t){return await this.axiosClient.put(`providers/rules/${encodeURIComponent(t)}`)}async healthCheckProvider(t){return await this.axiosClient.get(`providers/proxies/${encodeURIComponent(t)}/healthcheck`)}async getProxies(){return await this.axiosClient.get("proxies")}async getProxy(t){return await this.axiosClient.get(`proxies/${encodeURIComponent(t)}`)}async getVersion(){return await this.axiosClient.get("version")}async getProxyDelay(t){return await this.axiosClient.get(`proxies/${encodeURIComponent(t)}/delay`,{params:{timeout:5e3,url:"http://www.gstatic.com/generate_204"}})}async closeAllConnections(){return await this.axiosClient.delete("connections")}async closeConnection(t){return await this.axiosClient.delete(`connections/${t}`)}async getConnections(){return await this.axiosClient.get("connections")}async changeProxySelected(t,s){return await this.axiosClient.put(`proxies/${encodeURIComponent(t)}`,{name:s})}}const Rt=J(async()=>{if(!Y())return null;const n=await D.getAPIInfo();return{hostname:n.host,port:n.port,secret:n.secret,protocol:"http:"}}),Oe=we("externalControllers",[]);function ee(){var p,d,E,y,h,f,x,C,N,S,k,A,q,O,G;const n=fe(Rt),t=Ce(),s=fe(Oe);if(n!=null)return n;let o;{const j=document.querySelector('meta[name="external-controller"]');((p=j==null?void 0:j.content)==null?void 0:p.match(/^https?:/))!=null&&(o=new URL(j.content))}const a=new URLSearchParams(t.search),l=(h=(y=(d=o==null?void 0:o.hostname)!=null?d:a.get("host"))!=null?y:(E=s==null?void 0:s[0])==null?void 0:E.hostname)!=null?h:"127.0.0.1",r=(N=(C=(f=o==null?void 0:o.port)!=null?f:a.get("port"))!=null?C:(x=s==null?void 0:s[0])==null?void 0:x.port)!=null?N:"9090",c=(q=(A=(S=o==null?void 0:o.username)!=null?S:a.get("secret"))!=null?A:(k=s==null?void 0:s[0])==null?void 0:k.secret)!=null?q:"",u=((O=a.get("protocol"))!=null?O:l==="127.0.0.1")?"http:":(G=o==null?void 0:o.protocol)!=null?G:window.location.protocol;return{hostname:l,port:r,secret:c,protocol:u}}const It=J({key:"",instance:null});function $(){const{hostname:n,port:t,secret:s,protocol:o}=ee(),[a,l]=H(It),r=`${o}//${n}:${t}?secret=${s}`;if(a.key===r)return a.instance;const c=new $t(`${o}//${n}:${t}`,s);return l({key:r,instance:c}),c}const Se=J(!0),Tt=we("language",void 0);function F(){const[n,t]=H(Tt),s=m.exports.useMemo(()=>n!=null?n:Lt(),[n]),o=m.exports.useCallback(function(a){function l(r){return st(He[s][a],r)}return{t:l}},[s]);return{lang:s,locales:At,setLang:t,translation:o}}const je=J({version:"",premium:!1});function Ve(){const[n,t]=H(je),s=$(),o=be(Se);return X([s],async function(){const a=await Me.fromPromise(s.getVersion(),l=>l);o(a.isOk()),t(a.isErr()?{version:"",premium:!1}:{version:a.value.data.version,premium:!!a.value.data.premium})}),n}function _e(){const[{premium:n}]=H(je),t=$(),{data:s,mutate:o}=X(["/providers/rule",t,n],async()=>{if(!n)return[];const a=await t.getRuleProviders();return Object.keys(a.data.providers).map(l=>a.data.providers[l])});return{providers:s!=null?s:[],update:o}}const Bt=we("profile",{breakConnections:!1,logLevel:""});function ae(){const[n,t]=H(Bt),s=m.exports.useCallback(o=>{t(ve(n,o))},[n,t]);return{data:n,set:Pe(s)}}const We=J([]);function Ge(){const[n,t]=H(We),s=$(),{data:o,mutate:a}=X(["/providers/proxy",s],async()=>{const l=await s.getProxyProviders();return Object.keys(l.data.providers).map(r=>l.data.providers[r]).filter(r=>r.name!=="default").filter(r=>r.vehicleType!=="Compatible")});return m.exports.useEffect(()=>{t(o!=null?o:[])},[o,t]),{providers:n,update:a}}function le(){const n=$(),{data:t,mutate:s}=X(["/config",n],async()=>{var l;const a=(await n.getConfig()).data;return{port:a.port,socksPort:a["socks-port"],mixedPort:(l=a["mixed-port"])!=null?l:0,redirPort:a["redir-port"],mode:a.mode.toLowerCase(),logLevel:a["log-level"],allowLan:a["allow-lan"]}});return{general:t!=null?t:{},update:s}}const Je=Be({proxies:[],groups:[],global:{name:"GLOBAL",type:"Selector",now:"",history:[],all:[]}});function re(){const[n,t]=H(Je),s=Pe(t),o=$(),{mutate:a}=X(["/proxies",o],async()=>{const r=await o.getProxies(),c=r.data.proxies.GLOBAL;c.name="GLOBAL";const u=new Set(["Selector","URLTest","Fallback","LoadBalance"]),p=new Set(["DIRECT","REJECT","GLOBAL"]),d=c.all.filter(h=>!p.has(h)).map(h=>({...r.data.proxies[h],name:h})),[E,y]=kt(d,h=>!u.has(h.type));s({proxies:E,groups:y,global:c})}),l=m.exports.useCallback((r,c)=>{s(u=>{r==="GLOBAL"&&(u.global.now=c);for(const p of u.groups)p.name===r&&(p.now=c)})},[s]);return{proxies:n.proxies,groups:n.groups,global:n.global,update:a,markProxySelected:l,set:s}}const Mt=J(n=>{const t=n(Je),s=n(We),o=new Map;for(const a of t.proxies)o.set(a.name,a);for(const a of s)for(const l of a.proxies)o.set(l.name,l);return o});function Xe(){const{data:n,mutate:t}=X("/clashx",async()=>{var a,l;if(!Y())return{isClashX:!1,startAtLogin:!1,systemProxy:!1};const s=(a=await(D==null?void 0:D.getStartAtLogin()))!=null?a:!1,o=(l=await(D==null?void 0:D.isSystemProxySet()))!=null?l:!1;return{startAtLogin:s,systemProxy:o,isClashX:!0}});return{data:n,update:t}}const zt=Be([]);function Ht(){const[n,t]=H(zt),s=Pe(t),o=$();async function a(){const l=await o.getRules();s(l.data.rules)}return{rules:n,update:a}}const Ut=J(new Ue({bufferLength:200}));function qe(){const n=ee(),{general:t}=le(),{data:{logLevel:s}}=ae(),o=fe(Ut),a=s||t.logLevel,l=nt(`${n.protocol}//${n.hostname}:${n.port}/logs?level=${a}&secret=${encodeURIComponent(n.secret)}`),r=Ee(n);return m.exports.useEffect(()=>{if(a){const c=r.current,p=`${c.protocol==="http:"?"ws:":"wss:"}//${c.hostname}:${c.port}/logs?level=${a}&token=${encodeURIComponent(c.secret)}`;o.connect(p)}},[r,o,a,l]),o}function Ot(){const n=ee(),t=m.exports.useRef(new Ue({bufferLength:200})),o=`${n.protocol==="http:"?"ws:":"wss:"}//${n.hostname}:${n.port}/connections?token=${encodeURIComponent(n.secret)}`;return m.exports.useEffect(()=>{t.current.connect(o)},[o]),t.current}function jt(n){const{className:t,data:s,onClick:o,select:a,canClick:l,errSet:r,rowHeight:c}=n,{translation:u}=F(),{t:p}=u("Proxies"),[d,E]=m.exports.useState(!1),[y,h]=m.exports.useState(!1),f=m.exports.useRef(null);m.exports.useLayoutEffect(()=>{var k,A;h(((A=(k=f==null?void 0:f.current)==null?void 0:k.offsetHeight)!=null?A:0)>30)},[]);const x=d?"auto":c,C=l?o:z;function N(){E(!d)}const S=s.map(k=>{const A=w({"tags-selected":a===k,"cursor-pointer":l,error:r==null?void 0:r.has(k)});return e.createElement("li",{className:A,key:k,onClick:()=>C(k)},k)});return e.createElement("div",{className:w("flex items-start overflow-y-hidden",t),style:{height:x}},e.createElement("ul",{ref:f,className:w("tags",{expand:d})},S),y&&e.createElement("span",{className:"h-7 cursor-pointer select-none px-5 leading-7",onClick:N},p(d?"collapseText":"expandText")))}function K(n){const{className:t,style:s,value:o="",align:a="center",inside:l=!1,autoFocus:r=!1,type:c="text",disabled:u=!1,onChange:p=z,onBlur:d=z,onEnter:E=z}=n,y=w("input",`text-${a}`,{"focus:shadow-none":l},t);function h(f){f.code==="Enter"&&E(f)}return e.createElement("input",{disabled:u,className:y,style:s,value:o,autoFocus:r,type:c,onChange:f=>p(f.target.value,f),onBlur:d,onKeyDown:h})}function Vt(n){const{value:t,options:s,onSelect:o,disabled:a,className:l,style:r}=n,c=m.exports.useRef(document.createElement("div")),u=m.exports.useRef(null),[p,d]=m.exports.useState(!1),[E,y]=m.exports.useState({});m.exports.useLayoutEffect(()=>{const C=u.current.getBoundingClientRect();y({top:Math.floor(C.top+C.height)+6,left:Math.floor(C.left)-10})},[]),m.exports.useLayoutEffect(()=>{const C=c.current;return document.body.appendChild(C),()=>{document.body.removeChild(C)}},[]);function h(){a||d(!p)}const f=m.exports.useMemo(()=>s.find(C=>C.value===t),[t,s]),x=e.createElement("div",{className:w("select-list",{"select-list-show":p}),style:E},e.createElement("ul",{className:"list"},s.map(C=>{var N;return e.createElement(_t,{className:w({selected:C.value===t}),onClick:S=>{o==null||o(C.value,S),d(!1)},disabled:C.disabled,key:(N=C.key)!=null?N:C.value,value:C.value},C.label)})));return e.createElement(e.Fragment,null,e.createElement("div",{className:w("select",{disabled:a},l),style:r,ref:u,onClick:h},f==null?void 0:f.label,e.createElement(I,{type:"triangle-down"})),Ne.exports.createPortal(x,c.current))}function _t(n){const{className:t,style:s,disabled:o=!1,children:a,onClick:l=z}=n,r=w("option",{disabled:o},t);return e.createElement("li",{className:r,style:s,onClick:l},a)}function Ke(n){const{show:t=!0,title:s="Modal",size:o="small",footer:a=!0,onOk:l=z,onClose:r=z,bodyClassName:c,bodyStyle:u,className:p,style:d,children:E}=n,{translation:y}=F(),{t:h}=y("Modal"),f=m.exports.useRef(document.createElement("div")),x=m.exports.useRef(null);m.exports.useLayoutEffect(()=>{const S=f.current;return document.body.appendChild(S),()=>{document.body.removeChild(S)}},[]);function C(S){S.target===x.current&&r()}const N=e.createElement("div",{className:w("modal-mask",{"modal-show":t}),ref:x,onMouseDown:C},e.createElement("div",{className:w("modal",`modal-${o}`,p),style:d},e.createElement("div",{className:"modal-title"},s),e.createElement("div",{className:w("modal-body",c),style:u},E),a&&e.createElement("div",{className:"footer"},e.createElement(he,{onClick:()=>r()},h("cancel")),e.createElement(he,{type:"primary",onClick:()=>l()},h("ok")))));return Ne.exports.createPortal(N,f.current)}const Wt={success:"check",info:"info",warning:"info",error:"close"};function Gt(n){const{message:t="",type:s="info",inside:o=!1,children:a,className:l,style:r}=n,c=w("alert",`alert-${o?"note":"box"}-${s}`,l);return e.createElement("div",{className:c,style:r},e.createElement("span",{className:"alert-icon"},e.createElement(I,{type:Wt[s],size:26})),t?e.createElement("p",{className:"alert-message"},t):e.createElement("div",{className:"alert-message"},a))}function he(n){const{type:t="normal",onClick:s=z,children:o,className:a,style:l,disiabled:r}=n,c=w("button",`button-${t}`,a,{"button-disabled":r});return e.createElement("button",{className:c,style:l,onClick:s,disabled:r},o)}function se(n){const[t,s]=ot(n),o=m.exports.useMemo(()=>{function a(l,r){typeof l=="string"?s(c=>{const u=l,p=r;c[u]=p}):typeof l=="function"?s(l):typeof l=="object"&&s(c=>{const u=l;for(const p of Object.keys(u)){const d=p;c[d]=u[d]}})}return a},[s]);return[t,o]}function Jt(n,t=0){if(n.length<2)throw new Error("List requires at least two elements");const[s,o]=m.exports.useState(t);function a(){o((s+1)%n.length)}return{current:m.exports.useMemo(()=>n[s],[n,s]),next:a}}function ke(n=!1){const[t,s]=m.exports.useState(n);function o(){s(!1)}function a(){s(!0)}return{visible:t,hide:o,show:a}}function Ye(n){const{className:t,checked:s=!1,onChange:o=z}=n,a=w("checkbox",{checked:s},t);function l(){o(!s)}return e.createElement("div",{className:a,onClick:l},e.createElement(I,{className:"checkbox-icon",type:"check",size:18}),e.createElement("div",null,n.children))}function oe(n){const{color:t,className:s,style:o}=n,a=w("tag",s),l={color:t,...o},r={...n,className:a,style:l};return e.createElement("span",{...r},n.children)}function Xt(n){const t=w("spinner",n.className);return e.createElement("div",{className:t},e.createElement("div",{className:"spinner-circle"},e.createElement("div",{className:"spinner-inner"})),e.createElement("div",{className:"spinner-circle"},e.createElement("div",{className:"spinner-inner"})),e.createElement("div",{className:"spinner-circle"},e.createElement("div",{className:"spinner-inner"})),e.createElement("div",{className:"spinner-circle"},e.createElement("div",{className:"spinner-inner"})),e.createElement("div",{className:"spinner-circle"},e.createElement("div",{className:"spinner-inner"})))}function Qe(n){const t=w("loading","visible",n.className);return n.visible?e.createElement("div",{className:t},e.createElement(Xt,{className:n.spinnerClassName})):null}function qt(n){var a,l,r;const t=m.exports.useRef(document.createElement("div"));m.exports.useLayoutEffect(()=>{const c=t.current;return document.body.appendChild(c),()=>{document.body.removeChild(c)}},[]);const s="absolute h-full right-0 transition-transform transform translate-x-full duration-100 pointer-events-auto",o=e.createElement("div",{className:w(n.className,"z-9999 pointer-events-none absolute inset-0")},e.createElement(U,{className:w(s,n.bodyClassName,{"translate-x-0":n.visible}),style:{width:(a=n.width)!=null?a:400}},n.children));return Ne.exports.createPortal(o,(r=(l=n.containerRef)==null?void 0:l.current)!=null?r:t.current)}ne.extend(at);function De(n,t){const s=t==="en_US"?"en":"zh-cn";return ne(n).locale(s).from(ne())}function Kt(n){const{translation:t}=F(),s=m.exports.useMemo(()=>t("Connections").t,[t]),{className:o,style:a}=n,l=w("flex flex-wrap px-1",o);function r(c){var u;(u=n.onChange)==null||u.call(n,c)}return e.createElement("div",{className:l,style:a},e.createElement("div",{className:w("connections-devices-item mb-2 pt-2",{selected:n.selected===""}),onClick:()=>r("")},s("filter.all")),n.devices.map(c=>e.createElement("div",{key:c.label,className:w("connections-devices-item mb-2 pt-2",{selected:n.selected===c.label}),onClick:()=>r(c.label)},c.label," (",c.number,")")))}function Yt(n){var o,a,l,r,c,u,p,d,E,y,h,f,x;const{translation:t}=F(),s=m.exports.useMemo(()=>t("Connections").t,[t]);return e.createElement("div",{className:w(n.className,"flex flex-col overflow-y-auto text-sm")},e.createElement("div",{className:"my-3 flex"},e.createElement("span",{className:"w-20 font-bold"},s("info.id")),e.createElement("span",{className:"font-mono"},n.connection.id)),e.createElement("div",{className:"my-3 flex justify-between"},e.createElement("div",{className:"flex flex-1"},e.createElement("span",{className:"w-20 font-bold"},s("info.network")),e.createElement("span",{className:"font-mono"},(o=n.connection.metadata)==null?void 0:o.network)),e.createElement("div",{className:"flex flex-1"},e.createElement("span",{className:"w-20 font-bold"},s("info.inbound")),e.createElement("span",{className:"font-mono"},(a=n.connection.metadata)==null?void 0:a.type))),e.createElement("div",{className:"my-3 flex"},e.createElement("span",{className:"w-20 font-bold"},s("info.host")),e.createElement("span",{className:"flex-1 break-all font-mono"},(l=n.connection.metadata)!=null&&l.host?`${n.connection.metadata.host}:${(r=n.connection.metadata)==null?void 0:r.destinationPort}`:s("info.hostEmpty"))),e.createElement("div",{className:"my-3 flex"},e.createElement("span",{className:"w-20 font-bold"},s("info.dstIP")),e.createElement("span",{className:"font-mono"},(c=n.connection.metadata)!=null&&c.destinationIP?`${n.connection.metadata.destinationIP}:${(u=n.connection.metadata)==null?void 0:u.destinationPort}`:s("info.hostEmpty"))),e.createElement("div",{className:"my-3 flex"},e.createElement("span",{className:"w-20 font-bold"},s("info.srcIP")),e.createElement("span",{className:"font-mono"},`${(p=n.connection.metadata)==null?void 0:p.sourceIP}:${(d=n.connection.metadata)==null?void 0:d.sourcePort}`)),e.createElement("div",{className:"my-3 flex"},e.createElement("span",{className:"w-20 font-bold"},s("info.process")),e.createElement("span",{className:"flex-1 break-all font-mono"},(E=n.connection.metadata)!=null&&E.processPath?`${ze(n.connection.metadata.processPath)}`:s("info.hostEmpty"))),e.createElement("div",{className:"my-3 flex"},e.createElement("span",{className:"w-20 font-bold"},s("info.processPath")),e.createElement("span",{className:"flex-1 break-all font-mono"},(y=n.connection.metadata)!=null&&y.processPath?`${n.connection.metadata.processPath}`:s("info.hostEmpty"))),e.createElement("div",{className:"my-3 flex"},e.createElement("span",{className:"w-20 font-bold"},s("info.rule")),e.createElement("span",{className:"font-mono"},n.connection.rule&&`${n.connection.rule}${n.connection.rulePayload&&` :: ${n.connection.rulePayload}`}`)),e.createElement("div",{className:"my-3 flex"},e.createElement("span",{className:"w-20 font-bold"},s("info.chains")),e.createElement("span",{className:"flex-1 break-all font-mono"},(h=n.connection.chains)==null?void 0:h.slice().reverse().join(" / "))),e.createElement("div",{className:"my-3 flex justify-between"},e.createElement("div",{className:"flex flex-1"},e.createElement("span",{className:"w-20 font-bold"},s("info.upload")),e.createElement("span",{className:"font-mono"},M((f=n.connection.upload)!=null?f:0))),e.createElement("div",{className:"flex flex-1"},e.createElement("span",{className:"w-20 font-bold"},s("info.download")),e.createElement("span",{className:"font-mono"},M((x=n.connection.download)!=null?x:0)))),e.createElement("div",{className:"my-3 flex"},e.createElement("span",{className:"w-20 font-bold"},s("info.status")),e.createElement("span",{className:"font-mono"},n.connection.completed?e.createElement("span",{className:"text-red"},s("info.closed")):e.createElement("span",{className:"text-green"},s("info.opening")))))}class Qt{constructor(){this.connections=new Map,this.saveDisconnection=!1}appendToSet(t){var o;const s=t.reduce((a,l)=>a.set(l.id,l),new Map);for(const a of this.connections.keys())if(!s.has(a))if(!this.saveDisconnection)this.connections.delete(a);else{const l=this.connections.get(a);l!=null&&this.connections.set(a,ve(l,r=>{r.completed=!0,r.uploadSpeed=0,r.downloadSpeed=0}))}for(const a of s.keys()){if(!this.connections.has(a)){this.connections.set(a,{...s.get(a),uploadSpeed:0,downloadSpeed:0});continue}const l=this.connections.get(a),r=s.get(a);(o=this.connections)==null||o.set(a,{...r,uploadSpeed:r.upload-l.upload,downloadSpeed:r.download-l.download})}}toggleSave(){var t,s;if(this.saveDisconnection){this.saveDisconnection=!1;for(const o of this.connections.keys())(s=(t=this.connections)==null?void 0:t.get(o))!=null&&s.completed&&this.connections.delete(o)}else this.saveDisconnection=!0;return this.saveDisconnection}getConnections(){return[...this.connections.values()]}}function Zt(){const n=m.exports.useMemo(()=>new Qt,[]),t=m.exports.useRef(!0),[s,o]=m.exports.useState([]),[a,l]=m.exports.useState(!1),r=m.exports.useCallback(function(u){n.appendToSet(u),t.current&&o(n.getConnections()),t.current=!t.current},[n]),c=m.exports.useCallback(function(){const u=n.toggleSave();l(u),u||o(n.getConnections()),t.current=!0},[n]);return{connections:s,feed:r,toggleSave:c,save:a}}const v={Host:"host",Network:"network",Process:"process",Type:"type",Chains:"chains",Rule:"rule",Speed:"speed",Upload:"upload",Download:"download",SourceIP:"sourceIP",Time:"time"},en=new Set([v.Network,v.Type,v.Speed,v.Upload,v.Download,v.SourceIP,v.Time,v.Process]);function tn(n,t){switch(!0){case(n===0&&t===0):return"-";case(n!==0&&t!==0):return`\u2191 ${M(n)}/s \u2193 ${M(t)}/s`;case n!==0:return`\u2191 ${M(n)}/s`;default:return`\u2193 ${M(t)}/s`}}const R=ut();function nn(){const{translation:n,lang:t}=F(),s=m.exports.useMemo(()=>n("Connections").t,[n]),o=Ot(),a=Ee(o),l=$(),r=m.exports.useRef(null),[c,u]=se({uploadTotal:0,downloadTotal:0}),{visible:p,show:d,hide:E}=ke();function y(){l.closeAllConnections().finally(()=>E())}const{connections:h,feed:f,save:x,toggleSave:C}=Zt(),N=m.exports.useMemo(()=>h.map(i=>({id:i.id,host:`${i.metadata.host||i.metadata.destinationIP}:${i.metadata.destinationPort}`,chains:i.chains.slice().reverse().join(" / "),rule:i.rulePayload?`${i.rule} :: ${i.rulePayload}`:i.rule,time:new Date(i.start).getTime(),upload:i.upload,download:i.download,sourceIP:i.metadata.sourceIP,type:i.metadata.type,network:i.metadata.network.toUpperCase(),process:i.metadata.processPath,speed:{upload:i.uploadSpeed,download:i.downloadSpeed},completed:!!i.completed,original:i})),[h]),S=m.exports.useMemo(()=>{const i=lt(h,"metadata.sourceIP");return Object.keys(i).map(P=>({label:P,number:i[P].length})).sort((P,g)=>P.label.localeCompare(g.label))},[h]),k=m.exports.useRef(null),A=rt(k,{threshold:[1]}),q=m.exports.useMemo(()=>[R.accessor(v.Host,{minSize:260,size:260,header:s(`columns.${v.Host}`)}),R.accessor(v.Network,{minSize:80,size:80,header:s(`columns.${v.Network}`)}),R.accessor(v.Type,{minSize:100,size:100,header:s(`columns.${v.Type}`)}),R.accessor(v.Chains,{minSize:200,size:200,header:s(`columns.${v.Chains}`)}),R.accessor(v.Rule,{minSize:140,size:140,header:s(`columns.${v.Rule}`)}),R.accessor(v.Process,{minSize:100,size:100,header:s(`columns.${v.Process}`),cell:i=>i.getValue()?ze(i.getValue()):"-"}),R.accessor(i=>[i.speed.upload,i.speed.download],{id:v.Speed,header:s(`columns.${v.Speed}`),minSize:200,size:200,sortDescFirst:!0,sortingFn(i,P){var _,Z,Fe,Ae;const g=(Z=(_=i.original)==null?void 0:_.speed)!=null?Z:{upload:0,download:0},B=(Ae=(Fe=P.original)==null?void 0:Fe.speed)!=null?Ae:{upload:0,download:0};return g.download===B.download?g.upload-B.upload:g.download-B.download},cell:i=>tn(i.getValue()[0],i.getValue()[1])}),R.accessor(v.Upload,{minSize:100,size:100,header:s(`columns.${v.Upload}`),cell:i=>M(i.getValue())}),R.accessor(v.Download,{minSize:100,size:100,header:s(`columns.${v.Download}`),cell:i=>M(i.getValue())}),R.accessor(v.SourceIP,{minSize:140,size:140,header:s(`columns.${v.SourceIP}`),filterFn:"equals"}),R.accessor(v.Time,{minSize:120,size:120,header:s(`columns.${v.Time}`),cell:i=>De(new Date(i.getValue()),t),sortingFn:(i,P)=>{var g,B,_,Z;return((B=(g=P.original)==null?void 0:g.time)!=null?B:0)-((Z=(_=i.original)==null?void 0:_.time)!=null?Z:0)}})],[t,s]);m.exports.useLayoutEffect(()=>{function i(P){for(const g of P)u({uploadTotal:g.uploadTotal,downloadTotal:g.downloadTotal}),f(g.connections)}return o==null||o.subscribe("data",i),()=>{o==null||o.unsubscribe("data",i)}},[o,f,u]),ct(()=>{var i;(i=a.current)==null||i.destory()});const O=it({data:N,columns:q,getCoreRowModel:mt(),getSortedRowModel:dt(),getFilteredRowModel:pt(),initialState:{sorting:[{id:v.Time,desc:!1}]},columnResizeMode:"onChange",enableColumnResizing:!0}),G=O.getHeaderGroups()[0],[j,ce]=m.exports.useState("");function ie(i){ce(i),O.getColumn(v.SourceIP).setFilterValue(i||void 0)}const[T,L]=se({visible:!1,selectedID:"",connection:{}});function ue(){L(i=>{i.connection.completed=!0}),l.closeConnection(T.selectedID)}const V=Ee(T.connection);m.exports.useEffect(()=>{var P;const i=(P=N.find(g=>g.id===T.selectedID))==null?void 0:P.original;i?L(g=>{g.connection={...i},T.selectedID===V.current.id&&(g.connection.completed=V.current.completed)}):Object.keys(V.current).length!==0&&!V.current.completed&&L(g=>{g.connection.completed=!0})},[N,T.selectedID,V,L]);const Q=m.exports.useMemo(()=>{var i;return((i=A==null?void 0:A.intersectionRatio)!=null?i:0)<1},[A]),te=G.headers.map((i,P)=>{const g=i.column,B=g.id;return e.createElement("th",{className:w("connections-th",{resizing:g.getIsResizing(),fixed:g.id===v.Host,shadow:Q&&g.id===v.Host}),style:{width:i.getSize()},ref:g.id===v.Host?k:void 0,key:B},e.createElement("div",{onClick:g.getToggleSortingHandler()},Le(i.column.columnDef.header,i.getContext()),g.getIsSorted()!==!1?g.getIsSorted()==="desc"?" \u2193":" \u2191":null),P!==G.headers.length-1&&e.createElement("div",{onMouseDown:i.getResizeHandler(),onTouchStart:i.getResizeHandler(),className:"connections-resizer"}))}),b=O.getRowModel().rows.map(i=>{var P;return e.createElement("tr",{className:"cursor-default select-none",key:(P=i.original)==null?void 0:P.id,onClick:()=>{var g;return L({visible:!0,selectedID:(g=i.original)==null?void 0:g.id})}},i.getAllCells().map(g=>{var _;const B=w("connections-block",{"text-center":en.has(g.column.id),completed:(_=i.original)==null?void 0:_.completed},{fixed:g.column.id===v.Host,shadow:Q&&g.column.id===v.Host});return e.createElement("td",{className:B,style:{width:g.column.getSize()},key:g.column.id},Le(g.column.columnDef.cell,g.getContext()))}))});return e.createElement("div",{className:"page !h-100vh"},e.createElement(W,{title:s("title")},e.createElement("span",{className:"connections-filter flex-1 cursor-default"},`(${s("total.text")}: ${s("total.upload")} ${M(c.uploadTotal)} ${s("total.download")} ${M(c.downloadTotal)})`),e.createElement(Ye,{className:"connections-filter",checked:x,onChange:C},s("keepClosed")),e.createElement(I,{className:"connections-filter dangerous",onClick:d,type:"close-all",size:20})),S.length>1&&e.createElement(Kt,{devices:S,selected:j,onChange:ie}),e.createElement(U,{ref:r,className:"connections-card relative"},e.createElement("div",{className:"min-h-full min-w-full overflow-auto"},e.createElement("table",null,e.createElement("thead",null,e.createElement("tr",{className:"connections-header"},te)),e.createElement("tbody",null,b)))),e.createElement(Ke,{title:s("closeAll.title"),show:p,onClose:E,onOk:y},s("closeAll.content")),e.createElement(qt,{containerRef:r,bodyClassName:"flex flex-col",visible:T.visible,width:450},e.createElement("div",{className:"flex h-8 items-center justify-between"},e.createElement("span",{className:"pl-3 font-bold"},s("info.title")),e.createElement(I,{type:"close",size:16,className:"cursor-pointer",onClick:()=>L("visible",!1)})),e.createElement(Yt,{className:"mt-3 px-5",connection:T.connection}),e.createElement("div",{className:"mt-3 flex justify-end pr-3"},e.createElement(he,{type:"danger",disiabled:T.connection.completed,onClick:()=>ue()},s("info.closeConnection")))))}function sn(){const{translation:n}=F(),{t}=n("Settings"),{hostname:s,port:o,secret:a}=ee(),[l,r]=H(Se),[c,u]=se({hostname:"",port:"",secret:""});m.exports.useEffect(()=>{u({hostname:s,port:o,secret:a})},[s,o,a,u]);const p=be(Oe);function d(){const{hostname:E,port:y,secret:h}=c;p([{hostname:E,port:y,secret:h}])}return e.createElement(Ke,{show:!l,title:t("externalControllerSetting.title"),bodyClassName:"external-controller",onClose:()=>r(!0),onOk:d},e.createElement(Gt,{type:"info",inside:!0},e.createElement("p",null,t("externalControllerSetting.note"))),e.createElement("div",{className:"flex items-center"},e.createElement("span",{className:"my-1 w-14 font-bold md:my-3"},t("externalControllerSetting.host")),e.createElement(K,{className:"my-1 flex-1 md:my-3",align:"left",inside:!0,value:c.hostname,onChange:E=>u("hostname",E),onEnter:d})),e.createElement("div",{className:"flex items-center"},e.createElement("div",{className:"my-1 w-14 font-bold md:my-3"},t("externalControllerSetting.port")),e.createElement(K,{className:"my-1 w-14 flex-1 md:my-3",align:"left",inside:!0,value:c.port,onChange:E=>u("port",E),onEnter:d})),e.createElement("div",{className:"flex items-center"},e.createElement("div",{className:"my-1 w-14 font-bold md:my-3"},t("externalControllerSetting.secret")),e.createElement(K,{className:"my-1 w-14 flex-1 md:my-3",align:"left",inside:!0,value:c.secret,onChange:E=>u("secret",E),onEnter:d})))}const on=[{label:"Default",value:""},{label:"Debug",value:"debug"},{label:"Info",value:"info"},{label:"Warn",value:"warning"},{label:"Error",value:"error"},{label:"Silent",value:"silent"}],an=new Map([["debug","text-teal-500"],["info","text-sky-500"],["warning","text-pink-500"],["error","text-rose-500"]]);function ln(){var y,h;const n=m.exports.useRef(null),t=m.exports.useRef([]),[s,o]=m.exports.useState([]),{translation:a}=F(),{data:{logLevel:l},set:r}=ae(),{general:{logLevel:c}}=le(),{t:u}=a("Logs"),p=qe(),d=m.exports.useRef((h=(y=n.current)==null?void 0:y.scrollHeight)!=null?h:0),E=ft(c)==="silent";return m.exports.useLayoutEffect(()=>{var x;const f=n.current;f!=null&&d.current===f.scrollTop+f.clientHeight&&(f.scrollTop=f.scrollHeight-f.clientHeight),d.current=(x=f==null?void 0:f.scrollHeight)!=null?x:0}),m.exports.useEffect(()=>{function f(x){t.current=t.current.slice().concat(x.map(C=>({...C,time:new Date}))),o(t.current)}return p!=null&&(p.subscribe("data",f),t.current=p.buffer(),o(t.current)),()=>p==null?void 0:p.unsubscribe("data",f)},[p]),e.createElement("div",{className:"page"},e.createElement(W,{title:u("title")},e.createElement("span",{className:"text-primary-darken mr-2 text-sm"},u("levelLabel"),":"),e.createElement(Vt,{disabled:E,options:on,value:E?"silent":l,onSelect:f=>r(x=>{x.logLevel=f})})),e.createElement(U,{className:"mt-2.5 flex flex-1 flex-col md:mt-4"},e.createElement("ul",{className:"logs-panel",ref:n},s.map((f,x)=>e.createElement("li",{className:"inline-block text-[11px] leading-5",key:x},e.createElement("span",{className:"mr-2 text-orange-400"},"[",ne(f.time).format("YYYY-MM-DD HH:mm:ss"),"]"),e.createElement("span",{className:an.get(f.type)},"[",f.type.toUpperCase(),"]"),e.createElement("span",null," ",f.payload))))))}var ye=(n=>(n.SPEED_NOTIFY="speed-notify",n))(ye||{});class rn{constructor(){this.EE=new Te}notifySpeedTest(){this.EE.emit("speed-notify")}subscribe(t,s){this.EE.addListener(t,s)}unsubscribe(t,s){this.EE.removeListener(t,s)}}const xe=new rn;const Re={"#909399":0,"#00c520":260,"#ff9a28":600,"#ff3e5e":1/0};function Ze(n){var h,f;const{config:t,className:s}=n,{set:o}=re(),a=$(),l=m.exports.useCallback(async x=>{var N;if(Y())return(N=await(D==null?void 0:D.getProxyDelay(x)))!=null?N:0;const{data:{delay:C}}=await a.getProxyDelay(x);return C},[a]),r=m.exports.useCallback(async function(){const x=await Me.fromPromise(l(t.name),N=>N),C=x.isErr()?0:x.value;o(N=>{const S=N.proxies.find(k=>k.name===t.name);S!=null&&S.history.push({time:Date.now().toString(),delay:C})})},[t.name,l,o]),c=m.exports.useMemo(()=>{var x;return(x=t.history)!=null&&x.length?t.history.slice(-1)[0].delay:0},[t]);m.exports.useLayoutEffect(()=>{const x=()=>{r()};return xe.subscribe(ye.SPEED_NOTIFY,x),()=>xe.unsubscribe(ye.SPEED_NOTIFY,x)},[r]);const u=m.exports.useMemo(()=>c===0,[c]),p=m.exports.useMemo(()=>Object.keys(Re).find(x=>c<=Re[x]),[c]),d=u?"#E5E7EB":p;function E(){if(n.config.secretData==null){me.error("No data",{duration:500});return}navigator.clipboard.writeText(n.config.secretData).catch(()=>me("err",{duration:500})).then(()=>me("ok",{duration:500}))}const y=(f=(h=n.config)==null?void 0:h.all)!=null?f:[];return e.createElement("div",{className:w("proxy-item",{"opacity-50":u},s)},e.createElement("div",{className:"flex-1 "},e.createElement("div",{className:"flex items-center display:flex"},e.createElement("span",{className:w("rounded-sm py-[3px] px-1 text-[10px] text-white",{"text-gray-600":u}),style:{backgroundColor:d}},t.type),e.createElement("div",{className:"proxy-info-copy flex flex-auto items-center justify-end"},e.createElement("p",{className:"rounded-sm py-[3px] px-1 text-[10px]",style:{backgroundColor:"#E5E7EB"},onClick:E},"info"))),e.createElement("p",{className:"proxy-name"},t.name),y.map((x,C)=>e.createElement("div",{className:"relay-node"},"- ",x))),e.createElement("div",{className:"flex h-full flex-col items-center justify-center space-y-3 text-[10px] md:h-[18px] md:flex-row md:justify-between md:space-y-0"},e.createElement("p",null,c===0?"-":`${c}ms`),t.udp&&e.createElement("p",{className:"rounded bg-gray-200 p-[3px] text-gray-600"},"UDP")))}function cn(n){const{markProxySelected:t}=re(),[s]=H(Mt),{data:o}=ae(),a=$(),{config:l}=n;async function r(p){if(await a.changeProxySelected(n.config.name,p),t(n.config.name,p),o.breakConnections){const d=[],E=await a.getConnections();for(const y of E.data.connections)y.chains.includes(n.config.name)&&d.push(y.id);await Promise.all(d.map(y=>a.closeConnection(y)))}}const c=m.exports.useMemo(()=>{var d;const p=new Set;for(const E of l.all){const y=(d=s.get(E))==null?void 0:d.history;(y==null?void 0:y.length)&&y.slice(-1)[0].delay===0&&p.add(E)}return p},[l.all,s]),u=l.type==="Selector";return e.createElement("div",{className:"proxy-group"},e.createElement("div",{className:"md:h-15 mt-4 flex h-10 w-full items-center justify-between md:mt-0 md:w-auto"},e.createElement("span",{className:"w-35 md:w-30 h-6 overflow-hidden overflow-ellipsis whitespace-nowrap px-5"},l.name),e.createElement(oe,{className:"mr-5 md:mr-0"},l.type)),e.createElement("div",{className:"flex-1 py-2 md:py-4"},e.createElement(jt,{className:"ml-5 md:ml-8",data:l.all,onClick:r,errSet:c,select:l.now,canClick:u,rowHeight:30})))}function un(n){const{update:t}=Ge(),{translation:s,lang:o}=F(),a=$(),{provider:l}=n,{t:r}=s("Proxies"),{visible:c,hide:u,show:p}=ke();function d(){p(),a.healthCheckProvider(l.name).then(async()=>await t()).finally(()=>u())}function E(){p(),a.updateProvider(l.name).then(async()=>await t()).finally(()=>u())}const y=m.exports.useMemo(()=>l.proxies.slice().sort((h,f)=>-1*ge(h,f)),[l.proxies]);return e.createElement(U,{className:"proxy-provider"},e.createElement(Qe,{visible:c}),e.createElement("div",{className:"md:flex-row md:items-center flex flex-col justify-between"},e.createElement("div",{className:"flex items-center"},e.createElement("span",{className:"mr-6"},l.name),e.createElement(oe,null,l.vehicleType)),e.createElement("div",{className:"flex items-center pt-3 md:pt-0"},l.updatedAt&&e.createElement("span",{className:"text-sm"},`${r("providerUpdateTime")}: ${De(new Date(l.updatedAt),o)}`),e.createElement(I,{className:"text-red cursor-pointer pl-5",type:"healthcheck",size:18,onClick:d}),e.createElement(I,{className:"cursor-pointer pl-5",type:"update",size:18,onClick:E}))),e.createElement("ul",{className:"proxies-list"},y.map(h=>e.createElement("li",{key:h.name},e.createElement(Ze,{className:"proxy-provider-item",config:h})))))}const mn={[0]:"sort",[1]:"sort-ascending",[2]:"sort-descending"};function ge(n,t){const s=n.history.length>0?n.history.slice(-1)[0].delay:0;return((t.history.length>0?t.history.slice(-1)[0].delay:0)||Number.MAX_SAFE_INTEGER)-(s||Number.MAX_SAFE_INTEGER)}function dn(){const{groups:n,global:t}=re(),{data:s,set:o}=ae(),{general:a}=le(),{translation:l}=F(),{t:r}=l("Proxies"),c=m.exports.useMemo(()=>a.mode==="global"?[t,...n]:n,[a,n,t]);return e.createElement(e.Fragment,null,c.length!==0&&e.createElement("div",{className:"flex flex-col"},e.createElement(W,{title:r("groupTitle")},e.createElement(Ye,{className:"text-shadow-primary text-primary-600 cursor-pointer text-sm",checked:s.breakConnections,onChange:u=>o("breakConnections",u)},r("breakConnectionsText"))),e.createElement(U,{className:"my-2.5 p-0 md:my-4"},e.createElement("ul",{className:"list-none divide-y divide-gray-300"},c.map(u=>e.createElement("li",{key:u.name},e.createElement(cn,{config:u})))))))}function pn(){const{providers:n}=Ge(),{translation:t}=F(),{t:s}=t("Proxies");return e.createElement(e.Fragment,null,n.length!==0&&e.createElement("div",{className:"flex flex-col"},e.createElement(W,{title:s("providerTitle")}),e.createElement("ul",{className:"list-none"},n.map(o=>e.createElement("li",{className:"my-2.5 md:my-4",key:o.name},e.createElement(un,{provider:o}))))))}function fn(){const{proxies:n}=re(),{translation:t}=F(),{t:s}=t("Proxies");function o(){xe.notifySpeedTest()}const{current:a,next:l}=Jt([1,2,0]),r=m.exports.useMemo(()=>{switch(a){case 2:return n.slice().sort((u,p)=>ge(u,p));case 1:return n.slice().sort((u,p)=>-1*ge(u,p));default:return n.slice()}},[a,n]),c=l;return e.createElement(e.Fragment,null,r.length!==0&&e.createElement("div",{className:"flex flex-col"},e.createElement(W,{title:s("title")},e.createElement(I,{className:"ml-3",type:mn[a],onClick:c,size:20}),e.createElement(I,{className:"ml-3",type:"speed",size:20}),e.createElement("span",{className:"proxies-speed-test",onClick:o},s("speedTestText"))),e.createElement("ul",{className:"proxies-list"},r.map(u=>e.createElement("li",{key:u.name},e.createElement(Ze,{config:u}))))))}function En(){return e.createElement("div",{className:"page"},e.createElement(Et,null),e.createElement(dn,null),e.createElement(pn,null),e.createElement(fn,null))}function hn(n){const{update:t}=_e(),{translation:s,lang:o}=F(),a=$(),{provider:l}=n,{t:r}=s("Rules"),{visible:c,hide:u,show:p}=ke();function d(){p(),a.updateRuleProvider(l.name).then(async()=>await t()).finally(()=>u())}const E=w("rule-provider-icon",{"rule-provider-loading":c});return e.createElement("div",{className:"rule-provider"},e.createElement("div",{className:"rule-provider-header"},e.createElement("div",{className:"rule-provider-header-part"},e.createElement("span",{className:"rule-provider-name"},l.name),e.createElement(oe,null,l.vehicleType),e.createElement(oe,{className:"rule-provider-behavior"},l.behavior),e.createElement("span",{className:"rule-provider-update"},`${r("ruleCount")}: ${l.ruleCount}`)),e.createElement("div",{className:"rule-provider-header-part"},l.updatedAt&&e.createElement("span",{className:"rule-provider-update"},`${r("providerUpdateTime")}: ${De(new Date(l.updatedAt),o)}`),e.createElement(I,{className:E,type:"update",size:18,onClick:d}))))}function yn(){const{providers:n}=_e(),{translation:t}=F(),{t:s}=t("Rules");return e.createElement(e.Fragment,null,n.length!==0&&e.createElement("div",{className:"flex flex-col"},e.createElement(W,{title:s("providerTitle")}),e.createElement(U,{className:"shadow-primary mt-4 divide-y rounded p-0"},n.map(o=>e.createElement(hn,{key:o.name,provider:o})))))}function xn(){const{rules:n,update:t}=Ht(),{translation:s}=F(),{t:o}=s("Rules");X("rules",t);function a({index:l,style:r}){const c=n[l];return e.createElement("li",{className:"rule-item",style:r},e.createElement("div",{className:"flex py-1"},e.createElement("div",{className:"rule-type w-40 text-center"},c.type),e.createElement("div",{className:"payload flex-1 text-center"},c.payload),e.createElement("div",{className:"rule-proxy w-40 text-center"},c.proxy)))}return e.createElement("div",{className:"page"},e.createElement(yn,null),e.createElement(W,{className:"not-first:mt-7.5",title:o("title")}),e.createElement(U,{className:"mt-2.5 flex flex-1 flex-col p-0 focus:outline-none md:mt-4"},e.createElement(ht,{className:"min-h-120"},({height:l,width:r})=>e.createElement(yt,{height:l,width:r,itemCount:n.length,itemSize:50},a))))}const gn=[{label:"\u4E2D\u6587",value:"zh_CN"},{label:"English",value:"en_US"}];function vn(){var V,Q,te;const{premium:n}=Ve(),{data:t,update:s}=Xe(),{general:o,update:a}=le(),l=be(Se),r=ee(),{translation:c,setLang:u,lang:p}=F(),{t:d}=c("Settings"),E=$(),[y,h]=se({socks5ProxyPort:7891,httpProxyPort:7890,mixedProxyPort:0});m.exports.useEffect(()=>{var b,i,P;h("socks5ProxyPort",(b=o==null?void 0:o.socksPort)!=null?b:0),h("httpProxyPort",(i=o==null?void 0:o.port)!=null?i:0),h("mixedProxyPort",(P=o==null?void 0:o.mixedPort)!=null?P:0)},[o,h]);async function f(b){await E.updateConfig({mode:b}),await a()}async function x(b){await(D==null?void 0:D.setStartAtLogin(b)),await s()}async function C(b){await(D==null?void 0:D.setSystemProxy(b)),await s()}function N(b){u(b)}async function S(){await E.updateConfig({port:y.httpProxyPort}),await a()}async function k(){await E.updateConfig({"socks-port":y.socks5ProxyPort}),await a()}async function A(){await E.updateConfig({"mixed-port":y.mixedProxyPort}),await a()}async function q(b){await E.updateConfig({"allow-lan":b}),await a()}const{hostname:O,port:G}=r,{allowLan:j,mode:ce}=o,ie=(V=t==null?void 0:t.startAtLogin)!=null?V:!1,T=(Q=t==null?void 0:t.systemProxy)!=null?Q:!1,L=(te=t==null?void 0:t.isClashX)!=null?te:!1,ue=m.exports.useMemo(()=>{const b=[{label:d("values.global"),value:"Global"},{label:d("values.rules"),value:"Rule"},{label:d("values.direct"),value:"Direct"}];return n&&b.push({label:d("values.script"),value:"Script"}),b},[d,n]);return e.createElement("div",{className:"page"},e.createElement(W,{title:d("title")}),e.createElement(U,{className:"settings-card"},e.createElement("div",{className:"flex flex-wrap"},e.createElement("div",{className:"flex w-full items-center justify-between py-3 px-8 md:w-1/2"},e.createElement("span",{className:"label font-bold"},d("labels.startAtLogin")),e.createElement(pe,{disabled:!(t!=null&&t.isClashX),checked:ie,onChange:x})),e.createElement("div",{className:"flex w-full items-center justify-between py-3 px-8 md:w-1/2"},e.createElement("span",{className:"label font-bold"},d("labels.language")),e.createElement($e,{options:gn,value:p,onSelect:b=>N(b)}))),e.createElement("div",{className:"flex flex-wrap"},e.createElement("div",{className:"flex w-full items-center justify-between py-3 px-8 md:w-1/2"},e.createElement("span",{className:"label font-bold"},d("labels.setAsSystemProxy")),e.createElement(pe,{disabled:!L,checked:T,onChange:C})),e.createElement("div",{className:"flex w-full items-center justify-between py-3 px-8 md:w-1/2"},e.createElement("span",{className:"label font-bold"},d("labels.allowConnectFromLan")),e.createElement(pe,{checked:j,onChange:q})))),e.createElement(U,{className:"settings-card"},e.createElement("div",{className:"flex flex-wrap"},e.createElement("div",{className:"flex w-full items-center justify-between py-3 px-8 md:w-1/2"},e.createElement("span",{className:"label font-bold"},d("labels.proxyMode")),e.createElement($e,{options:ue,value:xt(ce),onSelect:f})),e.createElement("div",{className:"flex w-full items-center justify-between py-3 px-8 md:w-1/2"},e.createElement("span",{className:"label font-bold"},d("labels.socks5ProxyPort")),e.createElement(K,{className:"w-28",disabled:L,value:y.socks5ProxyPort,onChange:b=>h("socks5ProxyPort",+b),onBlur:k}))),e.createElement("div",{className:"flex flex-wrap"},e.createElement("div",{className:"flex w-full items-center justify-between py-3 px-8 md:w-1/2"},e.createElement("span",{className:"label font-bold"},d("labels.httpProxyPort")),e.createElement(K,{className:"w-28",disabled:L,value:y.httpProxyPort,onChange:b=>h("httpProxyPort",+b),onBlur:S})),e.createElement("div",{className:"flex w-full items-center justify-between py-3 px-8 md:w-1/2"},e.createElement("span",{className:"label font-bold"},d("labels.mixedProxyPort")),e.createElement(K,{className:"w-28",disabled:L,value:y.mixedProxyPort,onChange:b=>h("mixedProxyPort",+b),onBlur:A}))),e.createElement("div",{className:"flex flex-wrap"},e.createElement("div",{className:"flex w-full items-center justify-between py-3 px-8 md:w-1/2"},e.createElement("span",{className:"label font-bold"},d("labels.externalController")),e.createElement("span",{className:w({"modify-btn":!L},"external-controller"),onClick:()=>!L&&l(!1)},`${O}:${G}`)),e.createElement("div",{className:"w-1/2 px-8"}))))}const wn=""+new URL("logo.b453e72f.png",import.meta.url).href;function Cn(n){const{routes:t}=n,{translation:s}=F(),{version:o,premium:a}=Ve(),{data:l}=Xe(),{t:r}=s("SideBar"),c=Ce(),u=t.map(({path:p,name:d,noMobile:E})=>e.createElement("li",{className:w("item",{"no-mobile":E}),key:d},e.createElement(gt,{to:{pathname:p,search:c.search},className:({isActive:y})=>w({active:y})},r(d))));return e.createElement("div",{className:"sidebar"},e.createElement("img",{src:wn,alt:"logo",className:"sidebar-logo"}),e.createElement("ul",{className:"sidebar-menu"},u),e.createElement("div",{className:"sidebar-version"},e.createElement("span",{className:"sidebar-version-label"},"Clash",(l==null?void 0:l.isClashX)&&"X"," ",r("Version")),e.createElement("span",{className:"sidebar-version-text"},o),a&&e.createElement("span",{className:"sidebar-version-label"},"Premium")))}function bn(){qe();const n=Ce(),t=[{path:"/proxies",name:"Proxies",element:e.createElement(En,null)},{path:"/logs",name:"Logs",element:e.createElement(ln,null)},{path:"/rules",name:"Rules",element:e.createElement(xn,null),noMobile:!0},{path:"/connections",name:"Connections",element:e.createElement(nn,null),noMobile:!0},{path:"/settings",name:"Settings",element:e.createElement(vn,null)}],s=e.createElement("div",{className:w("app",{"not-clashx":!Y()})},e.createElement(Cn,{routes:t}),e.createElement("div",{className:"page-container"},e.createElement(vt,null)),e.createElement(sn,null));return e.createElement(wt,null,e.createElement(de,{path:"/",element:s},e.createElement(de,{path:"/",element:e.createElement(Ct,{to:{pathname:"/proxies",search:n.search},replace:!0})}),t.map(o=>e.createElement(de,{path:o.path,key:o.path,element:o.element}))))}function Ie(){const n=document.getElementById("root"),t=e.createElement(m.exports.StrictMode,null,e.createElement(Nt,null,e.createElement(m.exports.Suspense,{fallback:e.createElement(Qe,{visible:!0})},e.createElement(bn,null))));bt(n).render(t)}Y()?St(()=>Ie()):Ie();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
